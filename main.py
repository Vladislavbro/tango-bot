import logging
import os
from dotenv import load_dotenv
from logging import FileHandler

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --- 

# 1. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOG_DIR = "logs"
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä (–¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å)
log_formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
if logger.hasHandlers():
    logger.handlers.clear()

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)
logger.addHandler(console_handler)

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
log_file_path = os.path.join(LOG_DIR, "tango_bot.log")
file_handler = FileHandler(log_file_path, encoding='utf-8') # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
file_handler.setFormatter(log_formatter)
logger.addHandler(file_handler)

# --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --- 

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START_CHOICE, GET_NAME, GET_PHONE, CONFIRM_PHONE, CHOOSE_SLOT, POST_CONFIRMATION = range(6)

# --- –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –∑–∞–ø–∏—Å–∞—Ç—å—Å—è."""
    keyboard = [
        [InlineKeyboardButton("–î–∞, —Ö–æ—á—É!", callback_data="signup_yes")],
        [InlineKeyboardButton("–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="details")],
        [InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="signup_no")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–∞–Ω–≥–æ? –£ –Ω–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ ‚Äî "
        "–∏–¥–µ–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∏—Ç–º –∏ —Å—Ç—Ä–∞—Å—Ç—å —ç—Ç–æ–≥–æ —Ç–∞–Ω—Ü–∞! –•–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=reply_markup,
    )
    return START_CHOICE

async def start_choice_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±–µ–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
    logger.info(f"Callback data received: {query.data}") # <-- –õ–æ–≥ 1

    try:
        if query.data == "signup_yes":
            logger.info("Processing 'signup_yes'") # <-- –õ–æ–≥ 2
            await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            logger.info("Message edited for 'signup_yes', returning GET_NAME") # <-- –õ–æ–≥ 3
            return GET_NAME
        elif query.data == "details":
            logger.info("Processing 'details'") # <-- –õ–æ–≥ 4
            keyboard = [
                [InlineKeyboardButton("–î–∞, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!", callback_data="signup_yes")],
                [InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="signup_no")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                text="–≠—Ç–æ 60-–º–∏–Ω—É—Ç–Ω—ã–π —É—Ä–æ–∫, –≥–¥–µ —Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—à—å—Å—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Ç–∞–Ω–≥–æ, –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ "
                     "–∏ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –ù–∏–∫–∞–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏ –≤ —É–¥–æ–±–Ω–æ–π –æ–¥–µ–∂–¥–µ! "
                     "–ì–æ—Ç–æ–≤ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                reply_markup=reply_markup,
            )
            logger.info("Message edited for 'details', returning START_CHOICE") # <-- –õ–æ–≥ 5
            return START_CHOICE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –æ–∂–∏–¥–∞—è –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
        elif query.data == "signup_no":
            logger.info("Processing 'signup_no'") # <-- –õ–æ–≥ 6
            await query.edit_message_text(text="–ñ–∞–ª—å, –Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç! üòâ –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
            logger.info("Message edited for 'signup_no', returning END") # <-- –õ–æ–≥ 7
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in start_choice_callback: {e}", exc_info=True) # <-- –õ–æ–≥ –æ—à–∏–±–∫–∏
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user_name = update.message.text
    context.user_data['name'] = user_name
    logger.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}")
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
        f"—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å."
    )
    return GET_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    user_phone = update.message.text
    context.user_data['phone'] = user_phone
    logger.info(f"–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_phone}")

    keyboard = [
        [InlineKeyboardButton("–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", callback_data="phone_confirm_yes")],
        [InlineKeyboardButton("–ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="phone_confirm_no")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω: {user_phone}. –í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=reply_markup,
    )
    return CONFIRM_PHONE

async def confirm_phone_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    query = update.callback_query
    await query.answer()

    if query.data == "phone_confirm_yes":
        keyboard = [
            [InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞, 18:00", callback_data="slot_friday")],
            [InlineKeyboardButton("–°—É–±–±–æ—Ç–∞, 15:00", callback_data="slot_saturday")],
            [InlineKeyboardButton("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 17:00", callback_data="slot_sunday")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫. –í–æ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:",
            reply_markup=reply_markup,
        )
        return CHOOSE_SLOT
    elif query.data == "phone_confirm_no":
        await query.edit_message_text(text="–û–π, –¥–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º! –ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π?")
        return GET_PHONE # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞

async def choose_slot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏."""
    query = update.callback_query
    await query.answer()

    user_choice = query.data
    user_name = context.user_data.get('name', '–ì–æ—Å—Ç—å')
    user_phone = context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

    slot_text = ""
    if user_choice == "slot_friday":
        slot_text = "–ü—è—Ç–Ω–∏—Ü–∞, 18:00"
    elif user_choice == "slot_saturday":
        slot_text = "–°—É–±–±–æ—Ç–∞, 15:00"
    elif user_choice == "slot_sunday":
        slot_text = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 17:00"

    context.user_data['slot'] = slot_text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç: {slot_text}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
    confirmation_message = (
        f"–û—Ç–ª–∏—á–Ω–æ, {user_name}\\! üëç –ó–∞–ø–∏—Å—ã–≤–∞—é —Ç–µ–±—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ —Ç–∞–Ω–≥–æ –≤ {slot_text}\\.\n\n"
        f"üìå **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:**\n"
        f"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\- \n"
        f"**–°–ª–æ—Ç:** {slot_text}\n"
        f"**–ò–º—è:** {user_name}\n"
        f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user_phone}\n"
        f'**–ê–¥—Ä–µ—Å:** —É–ª\\. –¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è, 10 \\(—Å—Ç—É–¥–∏—è \"–¢–∞–Ω–≥–æ–ú–∞–Ω–∏—è\"\\)\n'
        f"\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\- \n\n"
        f"–ü—Ä–∏—Ö–æ–¥–∏ –≤ —É–¥–æ–±–Ω–æ–π –æ–¥–µ–∂–¥–µ –∏ —Å —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º\\! –ú—ã –ø—Ä–∏—à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ —É—Ä–æ–∫–∞\\.\n\n"
        f"–ï—Å–ª–∏ —á—Ç–æ\\-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏ /cancel\\.\n"
    )

    await query.edit_message_text(
        text=confirmation_message,
        parse_mode='MarkdownV2' # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    return POST_CONFIRMATION # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

async def post_confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    slot_text = context.user_data.get('slot')
    if slot_text:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        slot_text_escaped = slot_text.replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(")", "\\)")
        user_name = context.user_data.get('name', '–í—ã')
        user_name_escaped = user_name.replace("-", "\\-").replace(".", "\\.").replace("(", "\\(").replace(")", "\\)")

        await update.message.reply_text(
            f"{user_name_escaped}, –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {slot_text_escaped}\\. "
            f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel\\.",
            parse_mode='MarkdownV2'
        )
    else:
        # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await update.message.reply_text(
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start\\.",
            parse_mode='MarkdownV2'
        )
    return POST_CONFIRMATION # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    await update.message.reply_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start —Å–Ω–æ–≤–∞!",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    return ConversationHandler.END

async def fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text(
        "–û–π, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. "
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /cancel."
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_CHOICE: [
                CallbackQueryHandler(start_choice_callback, pattern="^(signup_yes|details|signup_no)$")
            ],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            CONFIRM_PHONE: [
                CallbackQueryHandler(confirm_phone_callback, pattern="^phone_confirm_(yes|no)$")
            ],
            CHOOSE_SLOT: [
                 CallbackQueryHandler(choose_slot_callback, pattern="^slot_(friday|saturday|sunday)$")
            ],
            POST_CONFIRMATION: [MessageHandler(filters.ALL & ~filters.Command('cancel') & ~filters.Command('start'), post_confirmation_handler)],
        },
        fallbacks=[
            CommandHandler("start", start), # –ü–æ–∑–≤–æ–ª—è–µ–º /start –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
            CommandHandler("cancel", cancel),
            MessageHandler(filters.COMMAND, fallback), # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
            MessageHandler(filters.TEXT & ~filters.COMMAND, fallback), # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            MessageHandler(filters.ALL & ~filters.COMMAND & ~filters.TEXT, fallback) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            ],
        # per_user=True —á—Ç–æ–±—ã —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
        # per_chat=True –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–ª—è —á–∞—Ç–∞
        conversation_timeout=300 # –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç 5 –º–∏–Ω—É—Ç
    )

    application.add_handler(conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å
    application.add_handler(MessageHandler(filters.COMMAND, fallback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –µ–≥–æ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main() 